{"version":3,"sources":["components/counter/index.js","components/counter/Counter.jsx","components/question/index.js","components/question/Question.jsx","components/answer-item/index.js","components/answer-item/AnswerItem.jsx","services/functions.js","components/answer-list/index.js","components/answer-list/AnswerList.jsx","components/confirm-btn/index.js","components/confirm-btn/ConfirmBtn.jsx","components/spinner/index.js","components/spinner/Spinner.jsx","components/results/index.js","components/results/Results.jsx","services/api-interactor.js","components/app/index.js","components/app/App.jsx","index.js"],"names":["Counter","currentNumber","amount","className","Question","question","difficulty","type","AnswerItem","value","onChangeHandler","onChange","e","name","id","htmlFor","shuffle","array","sort","Math","round","random","dropCheckboxes","checkboxes","document","getElementsByClassName","checked","AnswerList","correctAnswer","incorrectAnswers","useState","setUserAnswers","allAnswers","useMemo","useEffect","functions","map","item","index","ConfirmBtn","clickHandler","onClick","Spinner","Results","results","correctAnswers","questionNumbers","difficultyCounter","difficult","paramForReturn","totalCount","correctCount","Object","keys","forEach","result","sign","length","getData","url","a","fetch","response","ok","Error","status","json","App","data","setData","setCurrentNumber","loading","setLoading","userAnswers","setResults","quizEnd","setQuizEnd","apiInteractor","then","finally","target","currentQuestion","correct_answer","incorrect_answers","questionResult","answers","Array","isArray","i","compareResults","object","entries","push","extractUserAnswer","renderedContent","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e3e3af3c.chunk.js","sourcesContent":["import Counter from \"./Counter\";\r\nexport default Counter;","import './Counter.scss';\r\n\r\nconst Counter = ({ currentNumber, amount }) => {\r\n  return (\r\n    <div className=\"quiz__counter\">\r\n      <p>Question {currentNumber} of {amount}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Counter;","import Question from \"./Question\";\r\nexport default Question;","import './Question.scss';\r\n\r\nconst Question = ({ question, difficulty, type }) => {\r\n  return (\r\n    <>\r\n      <div className=\"quiz__question\">\r\n        <p>{question}</p>\r\n      </div>\r\n      <div className=\"quiz__description\">\r\n        <span className=\"quiz__description-item\">Difficulty: {difficulty}</span>\r\n        <span className=\"quiz__description-item\">Number of answers: {type === \"boolean\" ? \"One answer\" : \"One or few answers\"}</span>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Question;","import AnswerItem from \"./AnswerItem\";\r\nexport default AnswerItem;","import './AnswerItem.scss';\r\n\r\nconst AnswerItem = ({ value, type, currentNumber, onChangeHandler}) => {\r\n  return (\r\n    <div className=\"quiz__answer-item\">\r\n      {type === \"boolean\" ? \r\n        <input \r\n          type=\"radio\" \r\n          onChange={(e) => onChangeHandler(e, type)} \r\n          name={currentNumber} \r\n          id={value} \r\n          className=\"btn-element\"\r\n        /> : \r\n        <input \r\n          type=\"checkbox\" \r\n          onChange={(e) => onChangeHandler(e, type)} \r\n          name={currentNumber} \r\n          id={value} \r\n          className=\"btn-element\"\r\n        />}\r\n      <label htmlFor={value} className=\"\">{value}</label>\r\n    </div>  \r\n  );\r\n}\r\n\r\nexport default AnswerItem;","class functions {\r\n  shuffle = (array) => {  //may be replaced with a better algorithm\r\n    array.sort(() => Math.round(Math.random() * 100) - 50);\r\n    return array;\r\n  }\r\n\r\n  dropCheckboxes = (className) => {\r\n    const checkboxes = document.getElementsByClassName(className);\r\n    for (let item of checkboxes) {\r\n      item.checked = false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new functions();","import AnswerList from \"./AnswerList\";\r\nexport default AnswerList;","import { useEffect, useState, useMemo } from \"react\";\r\nimport AnswerItem from \"../answer-item\";\r\n\r\nimport functions from \"../../services/functions\";\r\n\r\nimport './AnswerList.scss';\r\n\r\nconst AnswerList = ({ correctAnswer, incorrectAnswers, type, currentNumber, onChangeHandler }) => {\r\n  const [userAnswers, setUserAnswers] = useState([]); // this state not using now, but may be useful in the future. Now this state controls rerendering. \r\n  const allAnswers = useMemo(() => [...incorrectAnswers, correctAnswer], [incorrectAnswers, correctAnswer]);\r\n\r\n  useEffect(() => {\r\n    functions.shuffle(allAnswers);\r\n    setUserAnswers(allAnswers);\r\n    functions.dropCheckboxes(\"btn-element\");\r\n  }, [currentNumber, allAnswers])\r\n\r\n  return (\r\n    <div className=\"quiz__answer-list\">\r\n      {allAnswers.map((item, index) => <AnswerItem key={index} value={item} type={type} currentNumber={currentNumber} onChangeHandler={onChangeHandler} />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AnswerList;","import ConfirmBtn from \"./ConfirmBtn\";\r\nexport default ConfirmBtn;","import './ConfirmBtn.scss';\r\n\r\nconst ConfirmBtn = ({ clickHandler }) => {\r\n\r\n  return (\r\n    <button onClick={clickHandler} className=\"quiz__next-btn\">Confirm</button>\r\n  );\r\n}\r\n\r\nexport default ConfirmBtn;","import Spinner from \"./Spinner\";\r\nexport default Spinner;","import React from \"react\";\r\n\r\nimport \"./Spinner.scss\";\r\n\r\nconst Spinner = () => {\r\n  return( \r\n    <div className=\"loadingio-spinner-spinner-tqnmo07nlda\">\r\n      <div className=\"ldio-ojoigx2t6va\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Spinner;","import Results from \"./Results\";\r\nexport default Results;\r\n","import \"./Results.scss\";\r\n\r\nconst Results = ({ results }) => {\r\n  let correctAnswers = 0, \r\n    questionNumbers = [];\r\n\r\n  const renderedList = () => {\r\n    questionNumbers = Object.keys(results);\r\n\r\n    const content = questionNumbers.map(item => {\r\n      const question = results[item];\r\n      if(question.result) correctAnswers+=1;\r\n      const sign = (!question.result) ? \"Wrong!\" : \"Correct!\"; \r\n      return <li key={item} className=\"quiz__list-item\">{+item + 1} - {sign}</li>\r\n    })\r\n    return content;\r\n  }\r\n\r\n  const difficultyCounter = (difficult, paramForReturn) => {\r\n    let totalCount = 0;\r\n    let correctCount = 0;\r\n    questionNumbers = Object.keys(results);\r\n    questionNumbers.forEach(item => {\r\n      const question = results[item];\r\n      if(question.difficulty === difficult) {\r\n        totalCount+=1;\r\n        if(question.result) correctCount+=1\r\n      }\r\n    })\r\n    if (paramForReturn === \"total\") return totalCount;\r\n    return correctCount;\r\n  }\r\n\r\n  return (\r\n    <div className=\"quiz__results\">\r\n      <h1>Your results:</h1>\r\n      <ul className=\"quiz__list\">\r\n        {renderedList()}\r\n      </ul>\r\n      <h2>In total: {correctAnswers} / {questionNumbers.length}</h2>\r\n      <h3>Among them:</h3>\r\n      <p>Easy questions - {difficultyCounter(\"easy\", \"correct\")} / {difficultyCounter(\"easy\", \"total\")}</p>\r\n      <p>Medium questions - {difficultyCounter(\"medium\", \"correct\")} / {difficultyCounter(\"medium\", \"total\")}</p>\r\n      <p>Hard questions - {difficultyCounter(\"hard\", \"correct\")} / {difficultyCounter(\"hard\", \"total\")}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Results;","class apiInteractor {\r\n  getData = async (url) => {\r\n    const response = await fetch(url);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Could not fetch ${url}, received ${response.status}`);\r\n    }\r\n    \r\n    const result = await response.json();\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default new apiInteractor();","import App from \"./App\";\r\nexport default App;","import React, { useState, useEffect } from \"react\";\n\nimport Counter from \"../counter\";\nimport Question from \"../question\";\nimport AnswerList from \"../answer-list\";\nimport ConfirmBtn from \"../confirm-btn\";\nimport Spinner from \"../spinner\";\nimport Results from \"../results\";\n\nimport apiInteractor from \"../../services/api-interactor\";\n\nimport './App.scss';\n\nconst App = () => {\n  const [data, setData] = useState([]),\n    [currentNumber, setCurrentNumber] = useState(0),\n    [loading, setLoading] = useState(true),\n    [userAnswers, setUserAnswers] = useState({}),\n    [results, setResults] = useState({}),\n    [quizEnd, setQuizEnd] = useState(false)\n\n  useEffect(() => { \n    apiInteractor.getData(\"https://opentdb.com/api.php?amount=10\")\n      .then(data => setData(data.results))\n      .finally(setLoading(false))\n  }, [])\n\n  const extractUserAnswer = (object) => {  // item[0] - answer, item[1] - bool value, which indicates if user chose this option (for situation, when he chose option and then changed his mind)\n    const answers = [];\n    const arrayOfArray = Object.entries(object);\n\n    arrayOfArray.forEach(item => {\n      if (item[1] === true) answers.push(item[0]);\n    })\n    return answers;\n  }\n\n  const compareResults = (answers, correctAnswer) => {\n    if (!Array.isArray(correctAnswer) && answers.length === 1 && answers[0] === correctAnswer) return true //check for 1 answer\n    if (answers.length !== correctAnswer.length) return false\n    answers.sort();\n    correctAnswer.sort();\n    for (let i = 0; i < answers.length; i++) {\n      if (answers[i] === correctAnswer[i]) continue;\n      else return false;\n    }\n    return true;\n  }\n\n  const onChangeHandler = (e, type) => {\n    const { id, checked } = e.target;\n    switch (type) {\n      case \"multiple\":\n        setUserAnswers({\n          ...userAnswers,\n          [id]: checked \n        });\n        break;\n      case \"boolean\":\n        setUserAnswers({\n          [id]: checked \n        });\n        break;\n      default: break;\n    }\n  }\n\n  const renderedContent = () => {\n    if (!data[currentNumber]) return <Spinner />;\n    const currentQuestion = data[currentNumber];\n    const { question, difficulty, type } = currentQuestion;\n    const correctAnswer = currentQuestion.correct_answer; \n    const incorrectAnswers = currentQuestion.incorrect_answers;\n\n    const confirmQuestion = () => {\n      if (currentNumber <= data.length) {\n        const questionResult = compareResults(extractUserAnswer(userAnswers), correctAnswer);\n\n        setResults({\n          ...results,\n          [currentNumber]: {\n            result: questionResult,\n            difficulty: difficulty\n          },\n        });\n\n        setCurrentNumber(currentNumber + 1)\n        setUserAnswers({})\n      }\n\n      if (currentNumber === data.length - 1) {\n        setQuizEnd(true)\n      }\n    }\n\n    return(\n      <>\n        <Counter currentNumber={currentNumber + 1} amount={data.length} />\n        <Question question={question} difficulty={difficulty} type={type} />\n        <AnswerList correctAnswer={correctAnswer} incorrectAnswers={incorrectAnswers} type={type} currentNumber={currentNumber} onChangeHandler={onChangeHandler} />\n        <ConfirmBtn clickHandler={confirmQuestion} />\n      </> \n    )\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"quiz\">\n        {!quizEnd ?\n          loading ? <Spinner /> : renderedContent()\n          :\n          <Results results={results}/>\n        }\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/app';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}